/* Generated by Yosys 0.49+1 (git sha1 3076803c9, clang++ 18.1.8 -fPIC -O3) */

(* top =  1  *)
(* src = "average_filter.v:32.1-119.12" *)
module average_filter(clk, reset_n, i_ce, data_in, data_out, o_ce);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  (* force_downto = 32'd1 *)
  (* src = "average_filter.v:105.21-105.42|/home/fpolo/oss-cad-suite/lib/../share/yosys/techmap.v:270.26-270.27" *)
  (* unused_bits = "0" *)
  wire [8:0] _042_;
  (* src = "average_filter.v:33.35-33.38" *)
  input clk;
  wire clk;
  (* src = "average_filter.v:36.35-36.42" *)
  input [7:0] data_in;
  wire [7:0] data_in;
  (* src = "average_filter.v:37.35-37.43" *)
  output [7:0] data_out;
  reg [7:0] data_out;
  (* src = "average_filter.v:35.35-35.39" *)
  input i_ce;
  wire i_ce;
  (* src = "average_filter.v:83.22-83.33" *)
  reg [7:0] last_sample;
  (* src = "average_filter.v:38.35-38.39" *)
  output o_ce;
  reg o_ce;
  (* src = "average_filter.v:34.35-34.42" *)
  input reset_n;
  wire reset_n;
  (* src = "average_filter.v:49.15-49.23" *)
  reg shift_ce;
  (* src = "average_filter.v:48.15-48.21" *)
  reg sum_ce;
  (* src = "average_filter.v:96.15-96.21" *)
  (* unused_bits = "0" *)
  wire [8:0] sum_ff;
  assign _000_ = sum_ce & reset_n;
  assign _001_ = last_sample[1] ^ data_in[1];
  assign _002_ = ~(last_sample[0] & data_in[0]);
  assign _042_[1] = ~(_002_ ^ _001_);
  assign _003_ = ~(last_sample[2] ^ data_in[2]);
  assign _004_ = last_sample[1] & data_in[1];
  assign _005_ = _001_ & ~(_002_);
  assign _006_ = _005_ | _004_;
  assign _042_[2] = ~(_006_ ^ _003_);
  assign _007_ = ~(last_sample[3] ^ data_in[3]);
  assign _008_ = ~(last_sample[2] & data_in[2]);
  assign _009_ = _006_ & ~(_003_);
  assign _010_ = _008_ & ~(_009_);
  assign _042_[3] = _010_ ^ _007_;
  assign _011_ = ~(last_sample[4] ^ data_in[4]);
  assign _012_ = ~(last_sample[3] & data_in[3]);
  assign _013_ = ~(_008_ | _007_);
  assign _014_ = _012_ & ~(_013_);
  assign _015_ = _007_ | _003_;
  assign _016_ = _006_ & ~(_015_);
  assign _017_ = _014_ & ~(_016_);
  assign _042_[4] = _017_ ^ _011_;
  assign _018_ = ~(last_sample[5] ^ data_in[5]);
  assign _019_ = ~(last_sample[4] & data_in[4]);
  assign _020_ = ~(_017_ | _011_);
  assign _021_ = _019_ & ~(_020_);
  assign _042_[5] = _021_ ^ _018_;
  assign _022_ = ~(last_sample[6] ^ data_in[6]);
  assign _023_ = ~(last_sample[5] & data_in[5]);
  assign _024_ = ~(_019_ | _018_);
  assign _025_ = _024_ | ~(_023_);
  assign _026_ = _018_ | _011_;
  assign _027_ = _026_ | _017_;
  assign _028_ = _027_ & ~(_025_);
  assign _042_[6] = _028_ ^ _022_;
  assign _029_ = ~(last_sample[7] ^ data_in[7]);
  assign _030_ = ~(last_sample[6] & data_in[6]);
  assign _031_ = ~(_028_ | _022_);
  assign _032_ = _030_ & ~(_031_);
  assign _042_[7] = _032_ ^ _029_;
  assign _033_ = ~(last_sample[7] & data_in[7]);
  assign _034_ = ~(_030_ | _029_);
  assign _035_ = _033_ & ~(_034_);
  assign _036_ = _029_ | _022_;
  assign _037_ = _025_ & ~(_036_);
  assign _038_ = _035_ & ~(_037_);
  assign _039_ = ~(_036_ | _026_);
  assign _040_ = _039_ & ~(_017_);
  assign _041_ = _038_ & ~(_040_);
  assign _042_[8] = _041_ ^ _029_;
  (* src = "average_filter.v:52.5-58.8" *)
  always @(posedge clk)
    if (!reset_n) sum_ce <= 1'h0;
    else sum_ce <= i_ce;
  reg \sum_ff_reg[1] ;
  (* src = "average_filter.v:100.5-107.8" *)
  always @(posedge clk)
    if (!reset_n) \sum_ff_reg[1]  <= 1'h0;
    else if (i_ce) \sum_ff_reg[1]  <= _042_[1];
  assign sum_ff[1] = \sum_ff_reg[1] ;
  reg \sum_ff_reg[2] ;
  (* src = "average_filter.v:100.5-107.8" *)
  always @(posedge clk)
    if (!reset_n) \sum_ff_reg[2]  <= 1'h0;
    else if (i_ce) \sum_ff_reg[2]  <= _042_[2];
  assign sum_ff[2] = \sum_ff_reg[2] ;
  reg \sum_ff_reg[3] ;
  (* src = "average_filter.v:100.5-107.8" *)
  always @(posedge clk)
    if (!reset_n) \sum_ff_reg[3]  <= 1'h0;
    else if (i_ce) \sum_ff_reg[3]  <= _042_[3];
  assign sum_ff[3] = \sum_ff_reg[3] ;
  reg \sum_ff_reg[4] ;
  (* src = "average_filter.v:100.5-107.8" *)
  always @(posedge clk)
    if (!reset_n) \sum_ff_reg[4]  <= 1'h0;
    else if (i_ce) \sum_ff_reg[4]  <= _042_[4];
  assign sum_ff[4] = \sum_ff_reg[4] ;
  reg \sum_ff_reg[5] ;
  (* src = "average_filter.v:100.5-107.8" *)
  always @(posedge clk)
    if (!reset_n) \sum_ff_reg[5]  <= 1'h0;
    else if (i_ce) \sum_ff_reg[5]  <= _042_[5];
  assign sum_ff[5] = \sum_ff_reg[5] ;
  reg \sum_ff_reg[6] ;
  (* src = "average_filter.v:100.5-107.8" *)
  always @(posedge clk)
    if (!reset_n) \sum_ff_reg[6]  <= 1'h0;
    else if (i_ce) \sum_ff_reg[6]  <= _042_[6];
  assign sum_ff[6] = \sum_ff_reg[6] ;
  reg \sum_ff_reg[7] ;
  (* src = "average_filter.v:100.5-107.8" *)
  always @(posedge clk)
    if (!reset_n) \sum_ff_reg[7]  <= 1'h0;
    else if (i_ce) \sum_ff_reg[7]  <= _042_[7];
  assign sum_ff[7] = \sum_ff_reg[7] ;
  reg \sum_ff_reg[8] ;
  (* src = "average_filter.v:100.5-107.8" *)
  always @(posedge clk)
    if (!reset_n) \sum_ff_reg[8]  <= 1'h0;
    else if (i_ce) \sum_ff_reg[8]  <= _042_[8];
  assign sum_ff[8] = \sum_ff_reg[8] ;
  (* src = "average_filter.v:86.5-93.8" *)
  always @(posedge clk)
    if (!reset_n) last_sample[0] <= 1'h0;
    else if (i_ce) last_sample[0] <= data_in[0];
  (* src = "average_filter.v:86.5-93.8" *)
  always @(posedge clk)
    if (!reset_n) last_sample[1] <= 1'h0;
    else if (i_ce) last_sample[1] <= data_in[1];
  (* src = "average_filter.v:86.5-93.8" *)
  always @(posedge clk)
    if (!reset_n) last_sample[2] <= 1'h0;
    else if (i_ce) last_sample[2] <= data_in[2];
  (* src = "average_filter.v:86.5-93.8" *)
  always @(posedge clk)
    if (!reset_n) last_sample[3] <= 1'h0;
    else if (i_ce) last_sample[3] <= data_in[3];
  (* src = "average_filter.v:86.5-93.8" *)
  always @(posedge clk)
    if (!reset_n) last_sample[4] <= 1'h0;
    else if (i_ce) last_sample[4] <= data_in[4];
  (* src = "average_filter.v:86.5-93.8" *)
  always @(posedge clk)
    if (!reset_n) last_sample[5] <= 1'h0;
    else if (i_ce) last_sample[5] <= data_in[5];
  (* src = "average_filter.v:86.5-93.8" *)
  always @(posedge clk)
    if (!reset_n) last_sample[6] <= 1'h0;
    else if (i_ce) last_sample[6] <= data_in[6];
  (* src = "average_filter.v:86.5-93.8" *)
  always @(posedge clk)
    if (!reset_n) last_sample[7] <= 1'h0;
    else if (i_ce) last_sample[7] <= data_in[7];
  (* src = "average_filter.v:110.5-117.8" *)
  always @(posedge clk)
    if (_000_) data_out[0] <= sum_ff[1];
  (* src = "average_filter.v:110.5-117.8" *)
  always @(posedge clk)
    if (_000_) data_out[1] <= sum_ff[2];
  (* src = "average_filter.v:110.5-117.8" *)
  always @(posedge clk)
    if (_000_) data_out[2] <= sum_ff[3];
  (* src = "average_filter.v:110.5-117.8" *)
  always @(posedge clk)
    if (_000_) data_out[3] <= sum_ff[4];
  (* src = "average_filter.v:110.5-117.8" *)
  always @(posedge clk)
    if (_000_) data_out[4] <= sum_ff[5];
  (* src = "average_filter.v:110.5-117.8" *)
  always @(posedge clk)
    if (_000_) data_out[5] <= sum_ff[6];
  (* src = "average_filter.v:110.5-117.8" *)
  always @(posedge clk)
    if (_000_) data_out[6] <= sum_ff[7];
  (* src = "average_filter.v:110.5-117.8" *)
  always @(posedge clk)
    if (_000_) data_out[7] <= sum_ff[8];
  (* src = "average_filter.v:70.5-76.8" *)
  always @(posedge clk)
    if (!reset_n) o_ce <= 1'h0;
    else o_ce <= shift_ce;
  (* src = "average_filter.v:61.5-67.8" *)
  always @(posedge clk)
    if (!reset_n) shift_ce <= 1'h0;
    else shift_ce <= sum_ce;
endmodule
