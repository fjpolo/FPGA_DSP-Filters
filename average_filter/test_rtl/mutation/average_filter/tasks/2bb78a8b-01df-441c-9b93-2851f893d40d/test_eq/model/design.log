
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.49+10 (git sha1 18a7c0038, x86_64-apple-darwin23.5-clang++ 18.1.8 -fPIC -O3)

-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: test_eq.v
Parsing SystemVerilog input from `test_eq.v' to AST representation.
Generating RTLIL representation for module `\miter'.
Successfully finished Verilog frontend.

2. Executing RTLIL frontend.
Input filename: mutated.il

3. Executing PREP pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \miter
Used module:     \average_filter

3.1.2. Analyzing design hierarchy..
Top module:  \miter
Used module:     \average_filter
Removed 0 unused modules.
Module miter directly or indirectly contains formal properties -> setting "keep" attribute.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\miter.$proc$test_eq.v:74$1'.

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `miter.$proc$test_eq.v:74$1'.
Cleaned up 0 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module average_filter.
Optimizing module miter.

3.3. Executing FUTURE pass.

3.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module average_filter.
Optimizing module miter.

3.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \average_filter..
Finding unused cells or wires in module \miter..
Removed 0 unused cells and 6 unused wires.
<suppressed ~2 debug messages>

3.6. Executing CHECK pass (checking for obvious problems).
Checking module average_filter...
Checking module miter...
Warning: Wire miter.\o_data [7] is used but has no driver.
Warning: Wire miter.\o_data [6] is used but has no driver.
Warning: Wire miter.\o_data [5] is used but has no driver.
Warning: Wire miter.\o_data [4] is used but has no driver.
Warning: Wire miter.\o_data [3] is used but has no driver.
Warning: Wire miter.\o_data [2] is used but has no driver.
Warning: Wire miter.\o_data [1] is used but has no driver.
Warning: Wire miter.\o_data [0] is used but has no driver.
Warning: Wire miter.\o_ce is used but has no driver.
Warning: Wire miter.\i_data_uut [7] is used but has no driver.
Warning: Wire miter.\i_data_uut [6] is used but has no driver.
Warning: Wire miter.\i_data_uut [5] is used but has no driver.
Warning: Wire miter.\i_data_uut [4] is used but has no driver.
Warning: Wire miter.\i_data_uut [3] is used but has no driver.
Warning: Wire miter.\i_data_uut [2] is used but has no driver.
Warning: Wire miter.\i_data_uut [1] is used but has no driver.
Warning: Wire miter.\i_data_uut [0] is used but has no driver.
Warning: Wire miter.\i_data_ref [7] is used but has no driver.
Warning: Wire miter.\i_data_ref [6] is used but has no driver.
Warning: Wire miter.\i_data_ref [5] is used but has no driver.
Warning: Wire miter.\i_data_ref [4] is used but has no driver.
Warning: Wire miter.\i_data_ref [3] is used but has no driver.
Warning: Wire miter.\i_data_ref [2] is used but has no driver.
Warning: Wire miter.\i_data_ref [1] is used but has no driver.
Warning: Wire miter.\i_data_ref [0] is used but has no driver.
Found and reported 25 problems.

3.7. Executing OPT pass (performing simple optimizations).

3.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module average_filter.
Optimizing module miter.

3.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\average_filter'.
<suppressed ~24 debug messages>
Finding identical cells in module `\miter'.
Removed a total of 8 cells.

3.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \average_filter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \miter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

3.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \average_filter.
  Optimizing cells in module \miter.
Performed a total of 0 changes.

3.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\average_filter'.
Finding identical cells in module `\miter'.
Removed a total of 0 cells.

3.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \average_filter..
Finding unused cells or wires in module \miter..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

3.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module average_filter.
Optimizing module miter.

3.7.8. Rerunning OPT passes. (Maybe there is more to do..)

3.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \average_filter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \miter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

3.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \average_filter.
  Optimizing cells in module \miter.
Performed a total of 0 changes.

3.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\average_filter'.
Finding identical cells in module `\miter'.
Removed a total of 0 cells.

3.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \average_filter..
Finding unused cells or wires in module \miter..

3.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module average_filter.
Optimizing module miter.

3.7.14. Finished OPT passes. (There is nothing left to do.)

3.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell average_filter.$auto$clk2fflogic.cc:87:sample_control_edge$54 ($eqx).
Removed top 7 bits (of 8) from port B of cell average_filter.$auto$mutate.cc:631:mutate_ctrl$44 ($eq).
Removed top 7 bits (of 8) from port A of cell miter.$eq$test_eq.v:75$4 ($eq).
Removed top 7 bits (of 8) from wire miter.$eq$test_eq.v:75$3_Y.

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \average_filter..
Finding unused cells or wires in module \miter..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module average_filter.
Optimizing module miter.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\average_filter'.
Finding identical cells in module `\miter'.
Removed a total of 0 cells.

3.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \average_filter..
Finding unused cells or wires in module \miter..

3.11.4. Finished fast OPT passes.

3.12. Printing statistics.

=== average_filter ===

   Number of wires:                 35
   Number of wire bits:            167
   Number of public wires:          21
   Number of public wire bits:     109
   Number of ports:                  7
   Number of port bits:             28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     $add                            1
     $eq                             1
     $eqx                            1
     $ff                            11
     $mux                           16

=== miter ===

   Number of wires:                 14
   Number of wire bits:             63
   Number of public wires:          12
   Number of public wire bits:      54
   Number of ports:                  6
   Number of port bits:             20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $check                          1
     $eq                             2
     average_filter                  2

=== design hierarchy ===

   miter                             1
     average_filter                  2

   Number of wires:                 84
   Number of wire bits:            397
   Number of public wires:          54
   Number of public wire bits:     272
   Number of ports:                 20
   Number of port bits:             76
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 63
     $add                            2
     $check                          1
     $eq                             4
     $eqx                            2
     $ff                            22
     $mux                           32

3.13. Executing CHECK pass (checking for obvious problems).
Checking module average_filter...
Checking module miter...
Warning: Wire miter.\o_data [7] is used but has no driver.
Warning: Wire miter.\o_data [6] is used but has no driver.
Warning: Wire miter.\o_data [5] is used but has no driver.
Warning: Wire miter.\o_data [4] is used but has no driver.
Warning: Wire miter.\o_data [3] is used but has no driver.
Warning: Wire miter.\o_data [2] is used but has no driver.
Warning: Wire miter.\o_data [1] is used but has no driver.
Warning: Wire miter.\o_data [0] is used but has no driver.
Warning: Wire miter.\o_ce is used but has no driver.
Warning: Wire miter.\i_data_uut [7] is used but has no driver.
Warning: Wire miter.\i_data_uut [6] is used but has no driver.
Warning: Wire miter.\i_data_uut [5] is used but has no driver.
Warning: Wire miter.\i_data_uut [4] is used but has no driver.
Warning: Wire miter.\i_data_uut [3] is used but has no driver.
Warning: Wire miter.\i_data_uut [2] is used but has no driver.
Warning: Wire miter.\i_data_uut [1] is used but has no driver.
Warning: Wire miter.\i_data_uut [0] is used but has no driver.
Warning: Wire miter.\i_data_ref [7] is used but has no driver.
Warning: Wire miter.\i_data_ref [6] is used but has no driver.
Warning: Wire miter.\i_data_ref [5] is used but has no driver.
Warning: Wire miter.\i_data_ref [4] is used but has no driver.
Warning: Wire miter.\i_data_ref [3] is used but has no driver.
Warning: Wire miter.\i_data_ref [2] is used but has no driver.
Warning: Wire miter.\i_data_ref [1] is used but has no driver.
Warning: Wire miter.\i_data_ref [0] is used but has no driver.
Found and reported 25 problems.

4. Executing FMCOMBINE pass.
Generating combined module $fmcombine\average_filter from module average_filter.
Combining cells ref and uut in module miter into new cell ref_uut.

5. Executing FLATTEN pass (flatten design).
Deleting now unused module $fmcombine\average_filter.
Deleting now unused module average_filter.
<suppressed ~1 debug messages>

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module miter.
<suppressed ~8 debug messages>

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\miter'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

6.3. Executing OPT_DFF pass (perform DFF optimizations).

6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \miter..
Removed 13 unused cells and 22 unused wires.
<suppressed ~14 debug messages>

6.5. Finished fast OPT passes.

7. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `miter'. Setting top module to miter.

7.1. Analyzing design hierarchy..
Top module:  \miter

7.2. Analyzing design hierarchy..
Top module:  \miter
Removed 0 unused modules.
Module miter directly or indirectly contains formal properties -> setting "keep" attribute.

8. Executing jny backend.

9. Executing RTLIL backend.
Output filename: ../model/design.il

Warnings: 25 unique messages, 50 total
End of script. Logfile hash: 21f6375354, CPU: user 0.09s system 0.01s, MEM: 8.25 MB peak
Yosys 0.49+10 (git sha1 18a7c0038, x86_64-apple-darwin23.5-clang++ 18.1.8 -fPIC -O3)
Time spent: 30% 7x opt_expr (0 sec), 26% 6x opt_clean (0 sec), ...
