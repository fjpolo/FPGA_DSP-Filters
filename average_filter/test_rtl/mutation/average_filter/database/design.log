
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.49+1 (git sha1 3076803c9, clang++ 18.1.8 -fPIC -O3)

-- Executing script file `database/design.ys' --

1. Executing Verilog-2005 frontend: average_filter.v
Parsing SystemVerilog input from `average_filter.v' to AST representation.
Storing AST representation for module `$abstract\average_filter'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\average_filter'.
Generating RTLIL representation for module `\average_filter'.

2.2.1. Analyzing design hierarchy..
Top module:  \average_filter

2.2.2. Analyzing design hierarchy..
Top module:  \average_filter
Removing unused module `$abstract\average_filter'.
Removed 1 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$average_filter.v:110$12 in module average_filter.
Marked 1 switch rules as full_case in process $proc$average_filter.v:100$9 in module average_filter.
Marked 1 switch rules as full_case in process $proc$average_filter.v:86$7 in module average_filter.
Marked 1 switch rules as full_case in process $proc$average_filter.v:70$5 in module average_filter.
Marked 1 switch rules as full_case in process $proc$average_filter.v:61$3 in module average_filter.
Marked 1 switch rules as full_case in process $proc$average_filter.v:52$1 in module average_filter.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 0 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~9 debug messages>

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\average_filter.$proc$average_filter.v:110$12'.
     1/2: $0\shift_ff[7:0]
     2/2: $0\data_out[7:0]
Creating decoders for process `\average_filter.$proc$average_filter.v:100$9'.
     1/1: $0\sum_ff[8:0]
Creating decoders for process `\average_filter.$proc$average_filter.v:86$7'.
     1/1: $0\last_sample[7:0]
Creating decoders for process `\average_filter.$proc$average_filter.v:70$5'.
     1/1: $0\o_ce[0:0]
Creating decoders for process `\average_filter.$proc$average_filter.v:61$3'.
     1/1: $0\shift_ce[0:0]
Creating decoders for process `\average_filter.$proc$average_filter.v:52$1'.
     1/1: $0\sum_ce[0:0]

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\average_filter.\data_out' using process `\average_filter.$proc$average_filter.v:110$12'.
  created $dff cell `$procdff$41' with positive edge clock.
Creating register for signal `\average_filter.\shift_ff' using process `\average_filter.$proc$average_filter.v:110$12'.
  created $dff cell `$procdff$42' with positive edge clock.
Creating register for signal `\average_filter.\sum_ff' using process `\average_filter.$proc$average_filter.v:100$9'.
  created $dff cell `$procdff$43' with positive edge clock.
Creating register for signal `\average_filter.\last_sample' using process `\average_filter.$proc$average_filter.v:86$7'.
  created $dff cell `$procdff$44' with positive edge clock.
Creating register for signal `\average_filter.\o_ce' using process `\average_filter.$proc$average_filter.v:70$5'.
  created $dff cell `$procdff$45' with positive edge clock.
Creating register for signal `\average_filter.\shift_ce' using process `\average_filter.$proc$average_filter.v:61$3'.
  created $dff cell `$procdff$46' with positive edge clock.
Creating register for signal `\average_filter.\sum_ce' using process `\average_filter.$proc$average_filter.v:52$1'.
  created $dff cell `$procdff$47' with positive edge clock.

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\average_filter.$proc$average_filter.v:110$12'.
Removing empty process `average_filter.$proc$average_filter.v:110$12'.
Found and cleaned up 2 empty switches in `\average_filter.$proc$average_filter.v:100$9'.
Removing empty process `average_filter.$proc$average_filter.v:100$9'.
Found and cleaned up 2 empty switches in `\average_filter.$proc$average_filter.v:86$7'.
Removing empty process `average_filter.$proc$average_filter.v:86$7'.
Found and cleaned up 1 empty switch in `\average_filter.$proc$average_filter.v:70$5'.
Removing empty process `average_filter.$proc$average_filter.v:70$5'.
Found and cleaned up 1 empty switch in `\average_filter.$proc$average_filter.v:61$3'.
Removing empty process `average_filter.$proc$average_filter.v:61$3'.
Found and cleaned up 1 empty switch in `\average_filter.$proc$average_filter.v:52$1'.
Removing empty process `average_filter.$proc$average_filter.v:52$1'.
Cleaned up 9 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module average_filter.
<suppressed ~7 debug messages>

2.4. Executing FUTURE pass.

2.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module average_filter.

2.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \average_filter..
Removed 8 unused cells and 25 unused wires.
<suppressed ~10 debug messages>

2.7. Executing CHECK pass (checking for obvious problems).
Checking module average_filter...
Found and reported 0 problems.

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module average_filter.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\average_filter'.
Removed a total of 0 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \average_filter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \average_filter.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\average_filter'.
Removed a total of 0 cells.

2.8.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \average_filter..

2.8.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module average_filter.

2.8.8. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \average_filter..

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module average_filter.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\average_filter'.
Removed a total of 0 cells.

2.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \average_filter..

2.12.4. Finished fast OPT passes.

2.13. Printing statistics.

=== average_filter ===

   Number of wires:                 20
   Number of wire bits:            101
   Number of public wires:          10
   Number of public wire bits:      39
   Number of ports:                  6
   Number of port bits:             20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $add                            1
     $dff                            6
     $mux                            9

2.14. Executing CHECK pass (checking for obvious problems).
Checking module average_filter...
Found and reported 0 problems.

3. Executing AUTONAME pass.
Renamed 58 objects in module average_filter (7 iterations).
<suppressed ~26 debug messages>

4. Executing RTLIL backend.
Output filename: database/design.il

End of script. Logfile hash: 564b9b2bef, CPU: user 0.00s system 0.03s, MEM: 12.29 MB peak
Yosys 0.49+1 (git sha1 3076803c9, clang++ 18.1.8 -fPIC -O3)
Time spent: 24% 5x opt_expr (0 sec), 19% 4x opt_clean (0 sec), ...
