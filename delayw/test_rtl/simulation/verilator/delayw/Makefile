# =============================================================================
# Makefile for Verilator Simulation
# Author      : @fjpolo
# Description : Compiles Verilog RTL with Verilator, links with C++ testbench,
#               and runs simulation to generate waveform for the delayw module.
# License     : MIT License
#
# Copyright (c) 2025 | @fjpolo
#
# =============================================================================

# --- Define Paths and Names ---
# RTL_DESIGN_TOP_MODULE: The main Verilog design file to be Verilated.
RTL_DESIGN_TOP_MODULE := ../../../../rtl/delayw.v
# CPP_TESTBENCH: The C++ testbench file containing the main simulation logic.
CPP_TESTBENCH := delayw_tb.cpp

# OUTPUT_NAME: Base name of the RTL top module (e.g., "delayw" from "delayw.v").
OUTPUT_NAME := $(shell basename $(RTL_DESIGN_TOP_MODULE) .v)
# OBJDIR: Directory for all compiled object files (for C++ testbench and Verilator)
# and Verilator's generated C++ files/Makefiles.
OBJDIR := obj_dir
# WAVEFORM: Name of the generated VCD waveform file.
WAVEFORM := delayw.vcd

# VERILATOR_INST_ROOT: Root directory of your OSS CAD Suite installation (e.g., /Users/fjpolo/oss-cad-suite)
VERILATOR_INST_ROOT := $(HOME)/oss-cad-suite
# VERILATOR_BIN: Full path to the Verilator executable.
VERILATOR_BIN := $(VERILATOR_INST_ROOT)/bin/verilator
# VERILATOR_INCLUDE_DIR: Path to Verilator's global include directory (e.g., /.../share/verilator/include)
VERILATOR_INCLUDE_DIR := $(VERILATOR_INST_ROOT)/share/verilator/include

# --- C++ Compiler Flags ---
CXX := g++
# CXXFLAGS: Flags for the C++ compiler. Using C++17 as required by Verilator.
# -DVL_NO_SC: This macro tells Verilator's internal C++ source files
#             (like verilated.cpp) to exclude SystemC-related code paths,
#             resolving the 'sc_time_stamp()' linker error.
CXXFLAGS := -std=c++17 -Wall -Og -g -DVL_NO_SC

# INCS: Include paths for headers.
# -I.: For testb.h (assuming it's in the current directory).
# -I$(OBJDIR): For Vdelayw.h (generated by Verilator).
# -I$(VERILATOR_INCLUDE_DIR): For verilated.h, verilated_vcd_c.h, etc.
INCS := -I. -I$(OBJDIR) -I$(VERILATOR_INCLUDE_DIR)

# VDEFS: Verilator definitions. (Requires a vversion.sh script or similar)
# If you don't have vversion.sh, you might omit this or define it manually if needed.
VDEFS := $(shell ./vversion.sh 2>/dev/null || true) # Suppress error if script not found

# VSRC: Verilator runtime source files from its include directory that need to be compiled.
VSRC := verilated.cpp verilated_vcd_c.cpp verilated_threads.cpp
# VLIB_OBJS: Object files for the Verilator runtime sources, placed in OBJDIR.
VLIB_OBJS := $(addprefix $(OBJDIR)/,$(subst .cpp,.o,$(VSRC)))

# --- Programs (Executables) to Build ---
PROGRAMS := delayw_tb

# --- Source Files ---
# All user-defined C++ source files, including the main testbench.
SOURCES := $(CPP_TESTBENCH)

# --- Default Target ---
.PHONY: all
all: $(PROGRAMS) run_sim waveform_check

# --- Clean Target ---
.PHONY: clean
clean:
	@echo "        [MAKE] Cleaning up build directory ($(OBJDIR))..."
	$(RM) -r $(OBJDIR)/ $(WAVEFORM) $(PROGRAMS) tags

# --- Macro to create object directory if it doesn't exist ---
define mk-objdir
	@bash -c "if [ ! -e $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi"
endef

# --- Rule to compile user C++ source files into object files ---
# Example: obj_dir/delayw_tb.o from delayw_tb.cpp
# This specific rule ensures that Vdelayw.h is generated before compiling delayw_tb.cpp
$(OBJDIR)/$(subst .cpp,.o,$(CPP_TESTBENCH)): $(CPP_TESTBENCH) $(OBJDIR)/V$(OUTPUT_NAME).mk
	$(mk-objdir)
	@echo "        [MAKE] Compiling C++ testbench source: $<"
	$(CXX) $(CXXFLAGS) $(INCS) -c $< -o $@

# General rule for other .cpp files (if any are added later that don't depend on V*.h)
$(OBJDIR)/%.o: %.cpp
	$(mk-objdir)
	@echo "        [MAKE] Compiling generic C++ source: $<"
	$(CXX) $(CXXFLAGS) $(INCS) -c $< -o $@

# --- Rule to compile Verilator's runtime C++ source files into object files ---
# Example: obj_dir/verilated.o from $(VERILATOR_INCLUDE_DIR)/verilated.cpp
$(OBJDIR)/%.o: $(VERILATOR_INCLUDE_DIR)/%.cpp
	$(mk-objdir)
	@echo "        [MAKE] Compiling Verilator runtime source: $<"
	$(CXX) $(CXXFLAGS) $(INCS) -c $< -o $@

# --- Rule to run Verilator to generate C++ from Verilog RTL ---
# This creates $(OBJDIR)/V$(OUTPUT_NAME).mk and other Verilated files.
$(OBJDIR)/V$(OUTPUT_NAME).mk: $(RTL_DESIGN_TOP_MODULE)
	@echo "        [MAKE] Verilating RTL module: $<"
	@mkdir -p $(OBJDIR)
	$(VERILATOR_BIN) --cc --trace --Mdir $(OBJDIR) $(RTL_DESIGN_TOP_MODULE)

# --- Rule to build the Verilator-generated archive for the RTL module ---
# This uses the Verilator-generated Makefile to create Vdelayw__ALL.a
$(OBJDIR)/V$(OUTPUT_NAME)__ALL.a: $(OBJDIR)/V$(OUTPUT_NAME).mk
	@echo "        [MAKE] Building Verilated module archive: $(notdir $@)"
	$(MAKE) -C $(OBJDIR) -f V$(OUTPUT_NAME).mk \
		CXXFLAGS="$(CXXFLAGS)" \
		V$(OUTPUT_NAME)__ALL.a # Explicitly targets the archive

# --- Linking Rule for the 'delayw_tb' executable ---
# This rule links together the testbench object, Verilator runtime objects,
# and the Verilator-generated module archive.
delayw_tb: $(OBJDIR)/delayw_tb.o $(VLIB_OBJS) $(OBJDIR)/V$(OUTPUT_NAME)__ALL.a
	@echo "        [MAKE] Linking $@ executable..."
	$(CXX) $(CXXFLAGS) $(INCS) $^ -lpthread -o $@

# --- Run Simulation Rule ---
.PHONY: run_sim
run_sim: delayw_tb
	@echo "        [MAKE] Running simulation: $(PROGRAMS)..."
	./$(PROGRAMS)

# --- Waveform Check Rule ---
.PHONY: waveform_check
waveform_check:
	@if [ -f "$(OBJDIR)/$(WAVEFORM)" ]; then \
		mv "$(OBJDIR)/$(WAVEFORM)" "$(WAVEFORM)"; \
		echo "        [MAKE] Waveform saved to $(WAVEFORM)"; \
	elif [ -f "$(WAVEFORM)" ]; then \
		echo "        [MAKE] Waveform already in $(WAVEFORM)"; \
	else \
		echo "        [MAKE] ERROR: Waveform file not generated. Check simulation output for errors."; \
		exit 1; \
	fi
	@echo "        [MAKE] PASS: Simulation completed successfully."

# --- Additional Targets from provided template ---
.PHONY: depends tags
# .PHONY: yosys nextpnr icepack # Commented out as they are not directly related to Verilator sim setup.

# The "depends" target, to know what files things depend upon.
# The depends file itself is kept in $(OBJDIR)/depends.txt
depends:
	$(mk-objdir)
	@echo "        [MAKE] Building dependency file..."
	@$(CXX) $(CXXFLAGS) $(INCS) -MM $(SOURCES) $(addprefix $(VERILATOR_INCLUDE_DIR)/, $(VSRC)) > $(OBJDIR)/xdepends.txt
	@sed -e 's/^.*.o: /$(OBJDIR)\/&/' < $(OBJDIR)/xdepends.txt > $(OBJDIR)/depends.txt
	@rm $(OBJDIR)/xdepends.txt

# The "tags" target
tags: $(SOURCES)
	@echo "        [MAKE] Generating tags..."
	@ctags $(SOURCES) $(addprefix $(VERILATOR_INCLUDE_DIR)/, $(VSRC)) $(RTL_DESIGN_TOP_MODULE) # Add RTL for tags

# Include automatically generated dependencies
ifneq ($(MAKECMDGOALS),clean)
-include $(OBJDIR)/depends.txt
endif
